// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "sqlite"
    url      = env("DATABASE_URL")
}

model Room {
    id               Int              @id @default(autoincrement())
    title            String
    plannedCleanings CleaningPlan[]
    reviews          Review[]
    actualCleanings  ActualCleaning[]
}

model CleaningPlan {
    id        Int     @id @default(autoincrement())
    room      Room    @relation(fields: [roomId], references: [id])
    roomId    Int
    from      String // @db.Time for MySQL
    to        String // @db.Time for MySQL
    cleaner   Cleaner @relation(fields: [cleanerId], references: [id])
    cleanerId Int
}

model ActualCleaning {
    id         Int       @id @default(autoincrement())
    room       Room      @relation(fields: [roomId], references: [id])
    roomId     Int
    startTime  DateTime
    finishTime DateTime?
    // TODO: Staff field
}

model Cleaner {
    id               Int            @id @default(autoincrement())
    firstName        String
    lastName         String
    patronymic       String?
    plannedCleanings CleaningPlan[]
}

model Review {
    id        Int      @id @default(autoincrement())
    name      String
    text      String
    createdAt DateTime
    room      Room     @relation(fields: [roomId], references: [id])
    roomId    Int
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
