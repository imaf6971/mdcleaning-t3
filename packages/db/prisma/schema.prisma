// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Item {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  photoPath   String? @unique
  room        Room[]
}

model Client {
  id         Int         @id @default(autoincrement())
  title      String
  roomGroups RoomGroup[]
}

model RoomGroup {
  id       Int    @id @default(autoincrement())
  title    String
  rooms    Room[]
  client   Client @relation(fields: [clientId], references: [id])
  clientId Int
}

model Room {
  id               Int              @id @default(autoincrement())
  title            String
  items            Item[]
  plannedCleanings CleaningPlan[]
  reviews          Review[]
  actualCleanings  ActualCleaning[]
  roomGroup        RoomGroup        @relation(fields: [roomGroupId], references: [id])
  roomGroupId      Int
}

model CleaningPlan {
  id        Int     @id @default(autoincrement())
  room      Room    @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
  from      String // @db.Time for MySQL
  to        String // @db.Time for MySQL
  cleaner   Cleaner @relation(fields: [cleanerId], references: [id])
  cleanerId Int
}

model ActualCleaning {
  id             Int              @id @default(autoincrement())
  room           Room             @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId         Int
  startTime      DateTime
  finishTime     DateTime?
  // TODO: Staff field
  cleaningPhotos CleaningPhotos[]
}

model CleaningPhotos {
  path             String         @id @unique
  actualCleaning   ActualCleaning @relation(fields: [actualCleaningId], references: [id], onDelete: Cascade)
  actualCleaningId Int
}

model Cleaner {
  id               Int            @id @default(autoincrement())
  firstName        String
  lastName         String
  patronymic       String?
  plannedCleanings CleaningPlan[]
}

model Review {
  id        Int      @id @default(autoincrement())
  name      String
  text      String
  createdAt DateTime
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  roomId    Int
}

// NextAuth.js Models
// NOTE: When using postgresql, mysql or sqlserver, 
// uncomment the @db.Text annotations below
// @see https://next-auth.js.org/schemas/models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Credentials {
  id                Int    @id @default(autoincrement())
  username          String @unique
  encryptedPassword String
}
